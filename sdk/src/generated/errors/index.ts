/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * AlreadyClaimed: 'Already claimed for user.'
 *
 * @category Errors
 * @category generated
 */
export class AlreadyClaimedError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'AlreadyClaimed'
  constructor() {
    super('Already claimed for user.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AlreadyClaimedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new AlreadyClaimedError())
createErrorFromNameLookup.set('AlreadyClaimed', () => new AlreadyClaimedError())

/**
 * ExceedsMaxYield: 'Rewards exceed max yield.'
 *
 * @category Errors
 * @category generated
 */
export class ExceedsMaxYieldError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'ExceedsMaxYield'
  constructor() {
    super('Rewards exceed max yield.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ExceedsMaxYieldError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new ExceedsMaxYieldError())
createErrorFromNameLookup.set(
  'ExceedsMaxYield',
  () => new ExceedsMaxYieldError()
)

/**
 * NotAuthorized: 'Invalid signer.'
 *
 * @category Errors
 * @category generated
 */
export class NotAuthorizedError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'NotAuthorized'
  constructor() {
    super('Invalid signer.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotAuthorizedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new NotAuthorizedError())
createErrorFromNameLookup.set('NotAuthorized', () => new NotAuthorizedError())

/**
 * InvalidParam: 'Invalid parameter.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidParamError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidParam'
  constructor() {
    super('Invalid parameter.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidParamError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidParamError())
createErrorFromNameLookup.set('InvalidParam', () => new InvalidParamError())

/**
 * AlreadyEarns: 'User is already an earner.'
 *
 * @category Errors
 * @category generated
 */
export class AlreadyEarnsError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'AlreadyEarns'
  constructor() {
    super('User is already an earner.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AlreadyEarnsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new AlreadyEarnsError())
createErrorFromNameLookup.set('AlreadyEarns', () => new AlreadyEarnsError())

/**
 * NoActiveClaim: 'There is no active claim to complete.'
 *
 * @category Errors
 * @category generated
 */
export class NoActiveClaimError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'NoActiveClaim'
  constructor() {
    super('There is no active claim to complete.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoActiveClaimError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new NoActiveClaimError())
createErrorFromNameLookup.set('NoActiveClaim', () => new NoActiveClaimError())

/**
 * NotEarning: 'User is not earning.'
 *
 * @category Errors
 * @category generated
 */
export class NotEarningError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'NotEarning'
  constructor() {
    super('User is not earning.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotEarningError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new NotEarningError())
createErrorFromNameLookup.set('NotEarning', () => new NotEarningError())

/**
 * RequiredAccountMissing: 'An optional account is required in this case, but not provided.'
 *
 * @category Errors
 * @category generated
 */
export class RequiredAccountMissingError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'RequiredAccountMissing'
  constructor() {
    super('An optional account is required in this case, but not provided.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RequiredAccountMissingError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new RequiredAccountMissingError())
createErrorFromNameLookup.set(
  'RequiredAccountMissing',
  () => new RequiredAccountMissingError()
)

/**
 * InvalidAccount: 'Account does not match the expected key.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAccountError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InvalidAccount'
  constructor() {
    super('Account does not match the expected key.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new InvalidAccountError())
createErrorFromNameLookup.set('InvalidAccount', () => new InvalidAccountError())

/**
 * NotActive: 'Account is not currently active.'
 *
 * @category Errors
 * @category generated
 */
export class NotActiveError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'NotActive'
  constructor() {
    super('Account is not currently active.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotActiveError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new NotActiveError())
createErrorFromNameLookup.set('NotActive', () => new NotActiveError())

/**
 * InvalidProof: 'Merkle proof verification failed.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidProofError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'InvalidProof'
  constructor() {
    super('Merkle proof verification failed.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidProofError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new InvalidProofError())
createErrorFromNameLookup.set('InvalidProof', () => new InvalidProofError())

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
