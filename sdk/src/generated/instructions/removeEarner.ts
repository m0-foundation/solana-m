/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RemoveEarner
 * @category generated
 */
export const removeEarnerStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'RemoveEarnerInstructionArgs'
)
/**
 * Accounts required by the _removeEarner_ instruction
 *
 * @property [_writable_, **signer**] signer
 * @property [_writable_] earnerAccount
 * @property [_writable_] earnManagerAccount
 * @category Instructions
 * @category RemoveEarner
 * @category generated
 */
export type RemoveEarnerInstructionAccounts = {
  signer: web3.PublicKey
  earnerAccount: web3.PublicKey
  earnManagerAccount: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const removeEarnerInstructionDiscriminator = [
  195, 235, 44, 204, 195, 134, 98, 113,
]

/**
 * Creates a _RemoveEarner_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category RemoveEarner
 * @category generated
 */
export function createRemoveEarnerInstruction(
  accounts: RemoveEarnerInstructionAccounts,
  programId = new web3.PublicKey('MzeRokYa9o1ZikH6XHRiSS5nD8mNjZyHpLCBRTBSY4c')
) {
  const [data] = removeEarnerStruct.serialize({
    instructionDiscriminator: removeEarnerInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.earnerAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.earnManagerAccount,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
