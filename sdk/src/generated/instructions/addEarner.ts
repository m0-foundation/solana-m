/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'
import { ProofElement, proofElementBeet } from '../types/ProofElement'

/**
 * @category Instructions
 * @category AddEarner
 * @category generated
 */
export type AddEarnerInstructionArgs = {
  user: web3.PublicKey
  proofs: ProofElement[][]
  neighbors: number[] /* size: 32 */[]
}
/**
 * @category Instructions
 * @category AddEarner
 * @category generated
 */
export const addEarnerStruct = new beet.FixableBeetArgsStruct<
  AddEarnerInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['user', beetSolana.publicKey],
    ['proofs', beet.array(beet.array(proofElementBeet))],
    ['neighbors', beet.array(beet.uniformFixedSizeArray(beet.u8, 32))],
  ],
  'AddEarnerInstructionArgs'
)
/**
 * Accounts required by the _addEarner_ instruction
 *
 * @property [_writable_, **signer**] signer
 * @property [] earnManagerAccount
 * @property [] globalAccount
 * @property [] userTokenAccount
 * @property [_writable_] earnerAccount
 * @category Instructions
 * @category AddEarner
 * @category generated
 */
export type AddEarnerInstructionAccounts = {
  signer: web3.PublicKey
  earnManagerAccount: web3.PublicKey
  globalAccount: web3.PublicKey
  userTokenAccount: web3.PublicKey
  earnerAccount: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const addEarnerInstructionDiscriminator = [
  191, 90, 193, 126, 226, 158, 64, 168,
]

/**
 * Creates a _AddEarner_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddEarner
 * @category generated
 */
export function createAddEarnerInstruction(
  accounts: AddEarnerInstructionAccounts,
  args: AddEarnerInstructionArgs,
  programId = new web3.PublicKey('MzeRokYa9o1ZikH6XHRiSS5nD8mNjZyHpLCBRTBSY4c')
) {
  const [data] = addEarnerStruct.serialize({
    instructionDiscriminator: addEarnerInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.earnManagerAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.globalAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.userTokenAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.earnerAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
