/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category PropagateIndex
 * @category generated
 */
export type PropagateIndexInstructionArgs = {
  index: beet.bignum
  earnerMerkleRoot: number[] /* size: 32 */
  earnManagerMerkleRoot: number[] /* size: 32 */
}
/**
 * @category Instructions
 * @category PropagateIndex
 * @category generated
 */
export const propagateIndexStruct = new beet.BeetArgsStruct<
  PropagateIndexInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['index', beet.u64],
    ['earnerMerkleRoot', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['earnManagerMerkleRoot', beet.uniformFixedSizeArray(beet.u8, 32)],
  ],
  'PropagateIndexInstructionArgs'
)
/**
 * Accounts required by the _propagateIndex_ instruction
 *
 * @property [**signer**] signer
 * @property [_writable_] globalAccount
 * @property [] mint
 * @category Instructions
 * @category PropagateIndex
 * @category generated
 */
export type PropagateIndexInstructionAccounts = {
  signer: web3.PublicKey
  globalAccount: web3.PublicKey
  mint: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const propagateIndexInstructionDiscriminator = [
  147, 161, 17, 101, 221, 86, 186, 218,
]

/**
 * Creates a _PropagateIndex_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category PropagateIndex
 * @category generated
 */
export function createPropagateIndexInstruction(
  accounts: PropagateIndexInstructionAccounts,
  args: PropagateIndexInstructionArgs,
  programId = new web3.PublicKey('MzeRokYa9o1ZikH6XHRiSS5nD8mNjZyHpLCBRTBSY4c')
) {
  const [data] = propagateIndexStruct.serialize({
    instructionDiscriminator: propagateIndexInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.globalAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
