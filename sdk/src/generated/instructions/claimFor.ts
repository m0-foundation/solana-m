/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ClaimFor
 * @category generated
 */
export type ClaimForInstructionArgs = {
  snapshotBalance: beet.bignum
}
/**
 * @category Instructions
 * @category ClaimFor
 * @category generated
 */
export const claimForStruct = new beet.BeetArgsStruct<
  ClaimForInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['snapshotBalance', beet.u64],
  ],
  'ClaimForInstructionArgs'
)
/**
 * Accounts required by the _claimFor_ instruction
 *
 * @property [**signer**] earnAuthority
 * @property [_writable_] globalAccount
 * @property [_writable_] mint
 * @property [] tokenAuthorityAccount
 * @property [_writable_] userTokenAccount
 * @property [_writable_] earnerAccount
 * @property [] mintMultisig
 * @property [] earnManagerAccount (optional)
 * @property [_writable_] earnManagerTokenAccount (optional)
 * @category Instructions
 * @category ClaimFor
 * @category generated
 */
export type ClaimForInstructionAccounts = {
  earnAuthority: web3.PublicKey
  globalAccount: web3.PublicKey
  mint: web3.PublicKey
  tokenAuthorityAccount: web3.PublicKey
  userTokenAccount: web3.PublicKey
  earnerAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
  mintMultisig: web3.PublicKey
  earnManagerAccount?: web3.PublicKey
  earnManagerTokenAccount?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const claimForInstructionDiscriminator = [
  245, 67, 97, 44, 59, 223, 144, 1,
]

/**
 * Creates a _ClaimFor_ instruction.
 *
 * Optional accounts that are not provided default to the program ID since
 * this was indicated in the IDL from which this instruction was generated.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ClaimFor
 * @category generated
 */
export function createClaimForInstruction(
  accounts: ClaimForInstructionAccounts,
  args: ClaimForInstructionArgs,
  programId = new web3.PublicKey('MzeRokYa9o1ZikH6XHRiSS5nD8mNjZyHpLCBRTBSY4c')
) {
  const [data] = claimForStruct.serialize({
    instructionDiscriminator: claimForInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.earnAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.globalAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenAuthorityAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.userTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.earnerAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.mintMultisig,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.earnManagerAccount ?? programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.earnManagerTokenAccount ?? programId,
      isWritable: accounts.earnManagerTokenAccount != null,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
