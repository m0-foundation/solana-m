/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'

/**
 * @category Instructions
 * @category SetEarnAuthority
 * @category generated
 */
export type SetEarnAuthorityInstructionArgs = {
  newEarnAuthority: web3.PublicKey
}
/**
 * @category Instructions
 * @category SetEarnAuthority
 * @category generated
 */
export const setEarnAuthorityStruct = new beet.BeetArgsStruct<
  SetEarnAuthorityInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['newEarnAuthority', beetSolana.publicKey],
  ],
  'SetEarnAuthorityInstructionArgs'
)
/**
 * Accounts required by the _setEarnAuthority_ instruction
 *
 * @property [**signer**] admin
 * @property [_writable_] globalAccount
 * @category Instructions
 * @category SetEarnAuthority
 * @category generated
 */
export type SetEarnAuthorityInstructionAccounts = {
  admin: web3.PublicKey
  globalAccount: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const setEarnAuthorityInstructionDiscriminator = [
  241, 163, 124, 135, 107, 230, 22, 157,
]

/**
 * Creates a _SetEarnAuthority_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SetEarnAuthority
 * @category generated
 */
export function createSetEarnAuthorityInstruction(
  accounts: SetEarnAuthorityInstructionAccounts,
  args: SetEarnAuthorityInstructionArgs,
  programId = new web3.PublicKey('MzeRokYa9o1ZikH6XHRiSS5nD8mNjZyHpLCBRTBSY4c')
) {
  const [data] = setEarnAuthorityStruct.serialize({
    instructionDiscriminator: setEarnAuthorityInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.admin,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.globalAccount,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
