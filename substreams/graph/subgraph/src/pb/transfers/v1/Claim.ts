// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";

export class Claim {
  static encode(message: Claim, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.tokenAccount);

    writer.uint32(18);
    writer.string(message.recipientTokenAccount);

    writer.uint32(24);
    writer.uint64(message.amount);

    writer.uint32(32);
    writer.uint64(message.managerFee);

    writer.uint32(40);
    writer.uint64(message.index);
  }

  static decode(reader: Reader, length: i32): Claim {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Claim();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.tokenAccount = reader.string();
          break;

        case 2:
          message.recipientTokenAccount = reader.string();
          break;

        case 3:
          message.amount = reader.uint64();
          break;

        case 4:
          message.managerFee = reader.uint64();
          break;

        case 5:
          message.index = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  tokenAccount: string;
  recipientTokenAccount: string;
  amount: u64;
  managerFee: u64;
  index: u64;

  constructor(
    tokenAccount: string = "",
    recipientTokenAccount: string = "",
    amount: u64 = 0,
    managerFee: u64 = 0,
    index: u64 = 0
  ) {
    this.tokenAccount = tokenAccount;
    this.recipientTokenAccount = recipientTokenAccount;
    this.amount = amount;
    this.managerFee = managerFee;
    this.index = index;
  }
}
