// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class TokenHolder extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenHolder entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TokenHolder must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenHolder", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TokenHolder | null {
    return changetype<TokenHolder | null>(
      store.get_in_block("TokenHolder", id.toHexString()),
    );
  }

  static load(id: Bytes): TokenHolder | null {
    return changetype<TokenHolder | null>(
      store.get("TokenHolder", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get mint(): Bytes {
    let value = this.get("mint");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set mint(value: Bytes) {
    this.set("mint", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get token_accounts(): TokenAccountLoader {
    return new TokenAccountLoader(
      "TokenHolder",
      this.get("id")!.toBytes().toHexString(),
      "token_accounts",
    );
  }
}

export class TokenAccount extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenAccount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TokenAccount must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenAccount", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TokenAccount | null {
    return changetype<TokenAccount | null>(
      store.get_in_block("TokenAccount", id.toHexString()),
    );
  }

  static load(id: Bytes): TokenAccount | null {
    return changetype<TokenAccount | null>(
      store.get("TokenAccount", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get pubkey(): Bytes {
    let value = this.get("pubkey");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pubkey(value: Bytes) {
    this.set("pubkey", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get claims(): ClaimLoader {
    return new ClaimLoader(
      "TokenAccount",
      this.get("id")!.toBytes().toHexString(),
      "claims",
    );
  }

  get cumulative_claims(): BigInt {
    let value = this.get("cumulative_claims");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulative_claims(value: BigInt) {
    this.set("cumulative_claims", Value.fromBigInt(value));
  }

  get transfers(): BalanceUpdateLoader {
    return new BalanceUpdateLoader(
      "TokenAccount",
      this.get("id")!.toBytes().toHexString(),
      "transfers",
    );
  }
}

export class Claim extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Claim entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Claim must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Claim", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Claim | null {
    return changetype<Claim | null>(
      store.get_in_block("Claim", id.toHexString()),
    );
  }

  static load(id: Bytes): Claim | null {
    return changetype<Claim | null>(store.get("Claim", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get token_account(): Bytes {
    let value = this.get("token_account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token_account(value: Bytes) {
    this.set("token_account", Value.fromBytes(value));
  }

  get recipient_token_account(): Bytes {
    let value = this.get("recipient_token_account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient_token_account(value: Bytes) {
    this.set("recipient_token_account", Value.fromBytes(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get signature(): Bytes {
    let value = this.get("signature");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set signature(value: Bytes) {
    this.set("signature", Value.fromBytes(value));
  }
}

export class BalanceUpdate extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BalanceUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type BalanceUpdate must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("BalanceUpdate", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): BalanceUpdate | null {
    return changetype<BalanceUpdate | null>(
      store.get_in_block("BalanceUpdate", id.toHexString()),
    );
  }

  static load(id: Bytes): BalanceUpdate | null {
    return changetype<BalanceUpdate | null>(
      store.get("BalanceUpdate", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get token_account(): Bytes {
    let value = this.get("token_account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token_account(value: Bytes) {
    this.set("token_account", Value.fromBytes(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get signature(): Bytes {
    let value = this.get("signature");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set signature(value: Bytes) {
    this.set("signature", Value.fromBytes(value));
  }
}

export class IndexUpdate extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save IndexUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type IndexUpdate must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("IndexUpdate", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): IndexUpdate | null {
    return changetype<IndexUpdate | null>(
      store.get_in_block("IndexUpdate", id.toHexString()),
    );
  }

  static load(id: Bytes): IndexUpdate | null {
    return changetype<IndexUpdate | null>(
      store.get("IndexUpdate", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get signature(): Bytes {
    let value = this.get("signature");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set signature(value: Bytes) {
    this.set("signature", Value.fromBytes(value));
  }
}

export class TokenAccountLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TokenAccount[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TokenAccount[]>(value);
  }
}

export class ClaimLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Claim[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Claim[]>(value);
  }
}

export class BalanceUpdateLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): BalanceUpdate[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<BalanceUpdate[]>(value);
  }
}
