// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";
import { IndexUpdate } from "./IndexUpdate";
import { Claim } from "./Claim";
import { BridgeEvent } from "./BridgeEvent";

export class Instruction {
  static encode(message: Instruction, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.programId);

    writer.uint32(18);
    writer.string(message.instruction);

    const indexUpdate = message.indexUpdate;
    if (indexUpdate !== null) {
      writer.uint32(82);
      writer.fork();
      IndexUpdate.encode(indexUpdate, writer);
      writer.ldelim();
    }

    const claim = message.claim;
    if (claim !== null) {
      writer.uint32(90);
      writer.fork();
      Claim.encode(claim, writer);
      writer.ldelim();
    }

    const bridgeEvent = message.bridgeEvent;
    if (bridgeEvent !== null) {
      writer.uint32(98);
      writer.fork();
      BridgeEvent.encode(bridgeEvent, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Instruction {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Instruction();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.programId = reader.string();
          break;

        case 2:
          message.instruction = reader.string();
          break;

        case 10:
          message.indexUpdate = IndexUpdate.decode(reader, reader.uint32());
          break;

        case 11:
          message.claim = Claim.decode(reader, reader.uint32());
          break;

        case 12:
          message.bridgeEvent = BridgeEvent.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  programId: string;
  instruction: string;
  indexUpdate: IndexUpdate | null;
  claim: Claim | null;
  bridgeEvent: BridgeEvent | null;

  constructor(
    programId: string = "",
    instruction: string = "",
    indexUpdate: IndexUpdate | null = null,
    claim: Claim | null = null,
    bridgeEvent: BridgeEvent | null = null
  ) {
    this.programId = programId;
    this.instruction = instruction;
    this.indexUpdate = indexUpdate;
    this.claim = claim;
    this.bridgeEvent = bridgeEvent;
  }
}
