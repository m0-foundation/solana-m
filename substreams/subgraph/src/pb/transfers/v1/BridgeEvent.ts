// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";

export class BridgeEvent {
  static encode(message: BridgeEvent, writer: Writer): void {
    writer.uint32(8);
    writer.int64(message.amount);

    writer.uint32(16);
    writer.uint64(message.tokenSupply);

    writer.uint32(26);
    writer.bytes(message.from);

    writer.uint32(34);
    writer.bytes(message.to);

    writer.uint32(40);
    writer.uint32(message.wormholeChainId);
  }

  static decode(reader: Reader, length: i32): BridgeEvent {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new BridgeEvent();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.amount = reader.int64();
          break;

        case 2:
          message.tokenSupply = reader.uint64();
          break;

        case 3:
          message.from = reader.bytes();
          break;

        case 4:
          message.to = reader.bytes();
          break;

        case 5:
          message.wormholeChainId = reader.uint32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  amount: i64;
  tokenSupply: u64;
  from: Uint8Array;
  to: Uint8Array;
  wormholeChainId: u32;

  constructor(
    amount: i64 = 0,
    tokenSupply: u64 = 0,
    from: Uint8Array = new Uint8Array(0),
    to: Uint8Array = new Uint8Array(0),
    wormholeChainId: u32 = 0
  ) {
    this.amount = amount;
    this.tokenSupply = tokenSupply;
    this.from = from;
    this.to = to;
    this.wormholeChainId = wormholeChainId;
  }
}
