// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";
import { TokenTransaction } from "./TokenTransaction";

export class TokenTransactions {
  static encode(message: TokenTransactions, writer: Writer): void {
    const transactions = message.transactions;
    for (let i: i32 = 0; i < transactions.length; ++i) {
      writer.uint32(10);
      writer.fork();
      TokenTransaction.encode(transactions[i], writer);
      writer.ldelim();
    }

    writer.uint32(18);
    writer.string(message.blockhash);

    writer.uint32(24);
    writer.uint64(message.slot);

    writer.uint32(32);
    writer.int64(message.blockTime);

    writer.uint32(40);
    writer.uint64(message.blockHeight);
  }

  static decode(reader: Reader, length: i32): TokenTransactions {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new TokenTransactions();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.transactions.push(
            TokenTransaction.decode(reader, reader.uint32())
          );
          break;

        case 2:
          message.blockhash = reader.string();
          break;

        case 3:
          message.slot = reader.uint64();
          break;

        case 4:
          message.blockTime = reader.int64();
          break;

        case 5:
          message.blockHeight = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  transactions: Array<TokenTransaction>;
  blockhash: string;
  slot: u64;
  blockTime: i64;
  blockHeight: u64;

  constructor(
    transactions: Array<TokenTransaction> = [],
    blockhash: string = "",
    slot: u64 = 0,
    blockTime: i64 = 0,
    blockHeight: u64 = 0
  ) {
    this.transactions = transactions;
    this.blockhash = blockhash;
    this.slot = slot;
    this.blockTime = blockTime;
    this.blockHeight = blockHeight;
  }
}
