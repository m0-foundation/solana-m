// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";

export class IndexUpdate {
  static encode(message: IndexUpdate, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.index);

    writer.uint32(16);
    writer.uint64(message.ts);

    writer.uint32(24);
    writer.uint64(message.supply);

    writer.uint32(32);
    writer.uint64(message.maxYield);
  }

  static decode(reader: Reader, length: i32): IndexUpdate {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new IndexUpdate();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.index = reader.uint64();
          break;

        case 2:
          message.ts = reader.uint64();
          break;

        case 3:
          message.supply = reader.uint64();
          break;

        case 4:
          message.maxYield = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  index: u64;
  ts: u64;
  supply: u64;
  maxYield: u64;

  constructor(index: u64 = 0, ts: u64 = 0, supply: u64 = 0, maxYield: u64 = 0) {
    this.index = index;
    this.ts = ts;
    this.supply = supply;
    this.maxYield = maxYield;
  }
}
