type TokenHolder @entity {
  id: Bytes! # <mint>-<owner>
  mint: Bytes!
  user: Bytes! @unique
  balance: BigInt!
  token_accounts: [TokenAccount!]! @derivedFrom(field: "owner")
}

type TokenAccount @entity {
  id: Bytes! # <token-account-pubkey>
  pubkey: Bytes! @unique
  mint: Bytes!
  owner: TokenHolder!
  balance: BigInt!
  claims: [Claim!]! @derivedFrom(field: "token_account")
  cumulative_claims: BigInt!
  transfers: [BalanceUpdate!]! @derivedFrom(field: "token_account")
}

type Claim @entity(immutable: true) {
  id: Bytes! # claim-<token_account>-<signature>
  amount: BigInt!
  manager_fee: BigInt!
  token_account: TokenAccount!
  recipient_token_account: TokenAccount!
  ts: BigInt!
  signature: Bytes!
}

type ClaimStats @entity(immutable: true) {
  id: Bytes! # claim-stat-<program-id>
  total_claimed: BigInt!
  num_claims: Int!
  program_id: Bytes!
}

type BalanceUpdate @entity(immutable: true) {
  id: Bytes! # transfer-<token_account>-<signature>
  amount: BigInt!
  token_account: TokenAccount!
  ts: BigInt!
  signature: Bytes!
  instructions: [String!]!
}

type IndexUpdate @entity(immutable: true) {
  id: Bytes! # index-update-<signature>
  index: BigInt!
  ts: BigInt!
  signature: Bytes!
}

type BridgeEvent @entity(immutable: true) {
  id: Bytes! # bridge-<signature>
  amount: BigInt!
  ts: BigInt!
  signature: Bytes!
  token_supply: BigInt!
  to: Bytes!
  from: Bytes!
  chain: String!
}

type BridgeStats @entity(immutable: true) {
  id: Bytes! # bridge-stats
  bridge_volume: BigInt!
  num_bridges: Int!
  net_bridged_amount: BigInt!
}
